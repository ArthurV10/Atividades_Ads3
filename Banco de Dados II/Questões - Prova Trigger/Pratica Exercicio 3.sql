-------------- Questão 1 --------------
CREATE TABLE FORNECEDOR (
	COD_FORNECEDOR SERIAL PRIMARY KEY,
	NOME_FORNECEDOR VARCHAR(40),
	ENDERECO_FORNECEDOR VARCHAR(40)
)

CREATE TABLE TITULO(
	COD_TITULO SERIAL PRIMARY KEY,
	DESCR_TITULO VARCHAR(50)
)

CREATE TABLE LIVRO(
	COD_LIVRO SERIAL PRIMARY KEY,
	COD_TITULO INT NOT NULL REFERENCES TITULO(COD_TITULO),
	QUANT_ESTOQUE INT,
	VALOR_UNITARIO FLOAT
)

CREATE TABLE PEDIDO (
	COD_PEDIDO SERIAL,
	COD_FORNECEDOR INT,
	DATA_HORA_PEDIDO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	VALOR_TOTAL_PEDIDO FLOAT,
	QUANT_ITENS_PEDIDOS INT
)

CREATE TABLE ITEM_PEDIDO(
	COD_LIVRO SERIAL,
	COD_PEDIDO INT,
	QUANTIDADE_ITEM INT,
	VALOR_TOTAL_ITEM FLOAT
)
---------------------------------------

-- POVOAMENTOS TABELAS --
-- ===== POVOAMENTOS ======
INSERT INTO TITULO (cod_titulo, DESCR_TITULO) VALUES
(1, 'O Senhor dos Anéis'),
(2, '1984'),
(3, 'A Revolução dos Bichos'),
(4, 'Dom Quixote'),
(5, 'Harry Potter e a Pedra Filosofal');

INSERT INTO LIVRO (COD_TITULO, VALOR_UNITARIO, QUANT_ESTOQUE) VALUES
(1, 100, 50),
(2, 50, 30),
(3, 40, 20),
(4, 80, 15),
(5, 90, 25);

INSERT INTO FORNECEDOR (NOME_FORNECEDOR, ENDERECO_FORNECEDOR) VALUES
('Editora A', 'RUA TCHOLA'),
('Editora B', 'RUA TRIGGER DA SILVA'),
('Editora C', 'AVENIDA BARÃO DE VIEW'),
('Editora D', 'ALAMEDA SELECT'),
('Editora E', 'FROM JOÃO DE INSERT SANTOS VALLEY');

INSERT INTO PEDIDO (COD_PEDIDO, COD_FORNECEDOR, DATA_HORA_PEDIDO, VALOR_TOTAL_PEDIDO, QUANT_ITENS_PEDIDOS) VALUES
(1, 1, NOW(), 150, 2),
(2, 1, NOW(), 160, 4),
(3, 5, NOW(), 90, 1),
(4, 2, NOW(), 260, 3),
(5, 3, NOW(), 40, 1);

INSERT INTO ITEM_PEDIDO (COD_PEDIDO, COD_LIVRO, QUANTIDADE_ITEM, VALOR_TOTAL_ITEM) VALUES
(1, 1, 1, 100),
(1, 2, 1, 50),
(2, 3, 4, 160),
(3, 5, 1, 90),
(4, 5, 2, 180),
(4, 4, 1, 80),
(5, 3, 1, 40);
-------------------------


-------------- Questão 2 --------------
-- Letra A --
CREATE OR REPLACE VIEW TABELA_VENDAS AS
SELECT NOME_FORNECEDOR, SUM(VALOR_TOTAL_PEDIDO) VALOR_TOTAL FROM FORNECEDOR
JOIN PEDIDO ON PEDIDO.COD_FORNECEDOR = FORNECEDOR.COD_FORNECEDOR
WHERE PEDIDO.DATA_HORA_PEDIDO BETWEEN '2025-05-01' AND '2025-05-31'
GROUP BY NOME_FORNECEDOR, VALOR_TOTAL_PEDIDO
HAVING SUM(VALOR_TOTAL_PEDIDO) > 10
ORDER BY VALOR_TOTAL DESC
;
------------

-- Letra B --
SELECT NOME_FORNECEDOR, VALOR_TOTAL FROM TABELA_VENDAS
LIMIT 1;
-------------

-- Letra C --
SELECT NOME_FORNECEDOR, SUM(VALOR_TOTAL_PEDIDO) FROM FORNECEDOR
JOIN PEDIDO ON PEDIDO.COD_FORNECEDOR = FORNECEDOR.COD_FORNECEDOR
WHERE PEDIDO.DATA_HORA_PEDIDO BETWEEN '2025-05-01' AND '2025-05-31'
GROUP BY NOME_FORNECEDOR
ORDER BY SUM(VALOR_TOTAL_PEDIDO) DESC;
-------------

---------------------------------------

-------------- Questão 3 --------------
-- Letra A --
CREATE OR REPLACE FUNCTION RESTRICAO_PEDIDO()
RETURNS TRIGGER
AS $$
BEGIN
	IF(NEW.COD_PEDIDO IS NULL) THEN
		RAISE EXCEPTION 'Codigo do pedido não pode ser nulo!';
	ELSIF EXISTS(SELECT COD_PEDIDO FROM PEDIDO WHERE COD_PEDIDO = NEW.COD_PEDIDO) THEN
		RAISE EXCEPTION 'Codigo do pedido ja existe na tabela!';
	END IF;
	IF (NEW.COD_FORNECEDOR IS NULL) THEN
		RAISE EXCEPTION 'Codigo do fornecedor é nulo';
	ELSIF NOT EXISTS(SELECT COD_FORNECEDOR FROM FORNECEDOR WHERE COD_FORNECEDOR = NEW.COD_FORNECEDOR) THEN
		RAISE EXCEPTION 'Codigo do fornecedor não existe!' ;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TG_RESTRICAO_PEDIDO
BEFORE INSERT OR UPDATE
ON PEDIDO
FOR EACH ROW
EXECUTE FUNCTION RESTRICAO_PEDIDO();

CREATE OR REPLACE FUNCTION RESTRICAO_ITEM_PEDIDO()
RETURNS TRIGGER
AS $$
BEGIN
	IF (COD_PEDIDO IS NULL) THEN
		RAISE EXCEPTION 'Codigo do pedido é nulo!';
	ELSIF NOT EXISTS (SELECT COD_PEDIDO FROM PEDIDO WHERE COD_PEDIDO = NEW.COD_PEDIDO) THEN
		RAISE EXCEPTION 'Codigo do pedido não existe';
	END IF;
	IF (COD_LIVRO IS NULL) THEN
		RAISE EXCEPTION 'Codigo do livro é nulo!';
	ELSIF NOT EXISTS (SELECT COD_LIVRO FROM LIVRO WHERE COD_LIVRO = NEW.COD_LIVRO) THEN
		RAISE EXCEPTION 'Codigo do livro não existe';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TG_RESTRICAO_ITEM_PEDIDO
BEFORE INSERT OR UPDATE
ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE FUNCTION RESTRICAO_ITEM_PEDIDO();
-------------

-- Letra B --
CREATE OR REPLACE FUNCTION LIVRO_RESTRICAO()
RETURNS TRIGGER
AS $$
BEGIN
	IF (QUANT_ESTOQUE < 10) THEN
		RAISE INFO 'Quantidade minima perto de esvaziar!';
	END IF
	IF (QUANT_ESTOQUE < 0) THEN
		RAISE EXCEPTION 'Estoque vazio, quantidade não pode ser negativa';
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TG_LIVRO_RESTRICAO
BEFORE INSERT OR UPDATE
ON LIVRO
FOR EACH ROW
EXECUTE FUNCTION LIVRO_RESTRICAO();
-------------

-- Letra C --
CREATE OR REPLACE FUNCTION ALTERACAO_ITEM_PEDIDO()
RETURNS TRIGGER
AS $$
BEGIN
	--- INSERÇÃO --
	IF (TG_OP = 'INSERT') THEN
		-- Atualizar Pedido
		UPDATE PEDIDO 
		SET QUANT_ITENS_PEDIDOS = COALESCE(QUANT_ITENS_PEDIDOS, 0) + NEW.QUANT_ITENS_PEDIDOS,
		VALOR_TOTAL_PEDIDO = COALESCE(VALOR_TOTAL_PEDIDO, 0) + NEW.VALOR_TOTAL_ITEM 
		WHERE COD_PEDIDO = NEW.COD_PEDIDO;
		-- Atualizar Estoque
		UPDATE LIVRO
		SET QUANT_ESTOQUE = QUANT_ESTOQUE - NEW.QUANTIDADE_ITEM 
		WHERE COD_LIVRO = NEW.COD_LIVRO;
		
	--- ATUALIZAÇÃO --
	ELSIF (TG_OP = 'UPDATE') THEN
		-- Atualizando Pedido --
		UPDATE PEDIDO
		SET QUANT_ITENS_PEDIDOS = COALESCE(QUANT_ITENS_PEDIDOS, 0) - OLD.QUANTIDADE_ITEM + NEW.QUANTIDADE_ITEM,
		VALOR_TOTAL_PEDIDO = COALESCE(VALOR_TOTAL_PEDIDO, 0) - OLD.VALOR_TOTAL_ITEM + NEW.VALOR_TOTAL_ITEM
		WHERE COD_PEDIDO = NEW.COD_PEDIDO;
		
		-- Atualizando Estoque --
			-- Primeiro Caso (Mudou a quantidade) --
			IF (NEW.COD_LIVRO = OLD.COD_LIVRO) THEN
				UPDATE LIVRO
				SET QUANT_ESTOQUE = COALESCE(QUANT_ESTOQUE, 0) + OLD.QUANTIDADE_ITEM - NEW.QUANTIDADE_ITEM
				WHERE COD_LIVRO = NEW.COD_LIVRO;
			-- Segundo Caso (Mudou o livro) --
			ELSE
				UPDATE LIVRO
				SET QUANT_ESTOQUE = QUANT_ESTOQUE + OLD.QUANTIDADE_ITEM
				WHERE COD_LIVRO = OLD.COD_LIVRO;

				UPDATE LIVRO
				SET QUANT_ESTOQUE = QUANT_ESTOQUE - NEW.QUANTIDADE_ITEM
				WHERE COD_LIVRO = NEW.COD_LIVRO;
			END IF;
			
	--- DELEÇÃO --
	ELSIF (TG_OP = 'DELETE') THEN
		UPDATE PEDIDO 
		SET QUANT_ITENS_PEDIDOS = COALESCE(QUANT_ITENS_PEDIDOS, 0) - NEW.QUANT_ITENS_PEDIDOS,
		VALOR_TOTAL_PEDIDO = COALESCE(VALOR_TOTAL_PEDIDO, 0) - NEW.VALOR_TOTAL_ITEM 
		WHERE COD_PEDIDO = NEW.COD_PEDIDO;
		-- Atualizar Estoque
		UPDATE LIVRO
		SET QUANT_ESTOQUE = QUANT_ESTOQUE + NEW.QUANTIDADE_ITEM 
		WHERE COD_LIVRO = NEW.COD_LIVRO;
		END IF;
RETURN NULL;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE TRIGGER TG_ALTERACAO_ITEM_PEDIDO
AFTER INSERT OR UPDATE OR DELETE
ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE FUNCTION ALTERACAO_ITEM_PEDIDO();
-------------


---------------------------------------
